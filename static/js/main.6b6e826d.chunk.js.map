{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setAppInitializedAC","appReducer","fetchTodolistsTC","createAsyncThunk","_","a","res","setTodolistsAC","todolists","removeTodolistTC","changeTodolistEntityStatusAC","removeTodolistAC","addTodolistTC","addTodolistAC","todolist","item","changeTodolistTitleTC","changeTodolistTitleAC","index","findIndex","tl","splice","unshift","filter","entityStatus","changeTodolistFilterAC","map","todolistsReducer","fetchTasksTC","tasks","items","removeTaskTC","removeTaskAC","addTaskTC","resultCode","task","addTaskAC","updateTaskTC","getState","rejectWithValue","find","t","apiModel","deadline","description","priority","startDate","updateTaskAC","todoListId","extraReducers","builder","addCase","forEach","fulfilled","tasksReducer","AddItemForm","React","memo","addItem","disabled","console","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","changeStatus","newTitle","addTodolist","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","then","catch","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","type","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6b6e826d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '1cdd9f77-c60e-4af5-b194-659e4ebd5d41'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n       const promise =  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n       return promise\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message: 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from '../../api/todolists-api'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\nconst a1 = {\r\n    type: 'SET-IS-LOGIN-IN',\r\n    payload: {\r\n        value: true\r\n    }\r\n}\r\nconst a2 = {\r\n    type: 'SET-blabal',\r\n    payload: {\r\n        user: {name: \"sdsd\"},\r\n        age: 12\r\n    }\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI} from '../api/todolists-api'\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer'\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC: (state, action: PayloadAction<{ error: string | null }>) => {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppInitializedAC: (state, action: PayloadAction<{ isInitialized: boolean }>) => {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const {setAppErrorAC, setAppStatusAC, setAppInitializedAC} = slice.actions\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}))\r\n        } else {\r\n\r\n        }\r\n\r\n        dispatch(setAppInitializedAC({isInitialized: true}))\r\n    })\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {\r\n    RequestStatusType,\r\n    setAppStatusAC,\r\n} from '../../app/app-reducer'\r\nimport {handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const fetchTodolistsTC = createAsyncThunk('todolists/fetchTodolists', async (_,{dispatch})=>{\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        dispatch(setTodolistsAC({todolists: res.data}))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }  catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n\r\n})\r\n\r\nexport const removeTodolistTC = createAsyncThunk('todolists/removeTodolist',\r\n    async (todolistId: string,{dispatch})=>{\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n    try {\r\n        await todolistsAPI.deleteTodolist(todolistId)\r\n        dispatch(removeTodolistAC({id: todolistId}))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }  catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n\r\n})\r\n\r\nexport const addTodolistTC = createAsyncThunk('todolists/addTodolist',\r\n    async (title: string,{dispatch}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }  catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n\r\n})\r\n\r\nexport const changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle',\r\n    async (payload:{id: string, title: string},{dispatch}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n         await todolistsAPI.updateTodolist(payload.id, payload.title)\r\n        dispatch(changeTodolistTitleAC({id: payload.id, title: payload.title}))\r\n    }  catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            if (index > -1) {\r\n                state.splice(index, 1);\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].title = action.payload.title;\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].filter = action.payload.filter;\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].entityStatus = action.payload.status;\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        }\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\nexport const {\r\n    removeTodolistAC, addTodolistAC, changeTodolistTitleAC\r\n    , changeTodolistFilterAC, changeTodolistEntityStatusAC, setTodolistsAC\r\n} = slice.actions\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n// import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\n// import {Dispatch} from 'redux'\r\n// import {\r\n//     initializeAppTC,\r\n//     RequestStatusType,\r\n//     SetAppErrorActionType,\r\n//     setAppStatusAC,\r\n//     SetAppStatusActionType\r\n// } from '../../app/app-reducer'\r\n// import {handleServerNetworkError} from '../../utils/error-utils'\r\n// import {createSlice, PayloadAction, ThunkDispatch} from '@reduxjs/toolkit'\r\n//\r\n// const initialState: Array<TodolistDomainType> = []\r\n//\r\n// const slice = createSlice({\r\n//     name: 'todolists',\r\n//     initialState: initialState,\r\n//     reducers: {\r\n//         removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n//             const index = state.findIndex(tl => tl.id === action.payload.id);\r\n//             if (index > -1) {\r\n//                 state.splice(index, 1);\r\n//             }\r\n//         },\r\n//         addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n//             state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n//         },\r\n//         changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n//             const index = state.findIndex(tl => tl.id === action.payload.id);\r\n//             state[index].title = action.payload.title;\r\n//         },\r\n//         changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n//             const index = state.findIndex(tl => tl.id === action.payload.id);\r\n//             state[index].filter = action.payload.filter;\r\n//         },\r\n//         changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n//             const index = state.findIndex(tl => tl.id === action.payload.id);\r\n//             state[index].entityStatus = action.payload.status;\r\n//         },\r\n//         setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n//             return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n//         }\r\n//     }\r\n// })\r\n//\r\n// export const todolistsReducer = slice.reducer\r\n// export const {\r\n//     removeTodolistAC, addTodolistAC, changeTodolistTitleAC\r\n//     , changeTodolistFilterAC, changeTodolistEntityStatusAC, setTodolistsAC\r\n// } = slice.actions\r\n//\r\n// // thunks\r\n// export const fetchTodolistsTC = () => {\r\n//     return (dispatch: Dispatch) => {\r\n//         dispatch(setAppStatusAC({status: 'loading'}))\r\n//         todolistsAPI.getTodolists()\r\n//             .then((res) => {\r\n//                 dispatch(setTodolistsAC({todolists: res.data}))\r\n//                 dispatch(setAppStatusAC({status: 'succeeded'}))\r\n//             })\r\n//             .catch(error => {\r\n//                 handleServerNetworkError(error, dispatch)\r\n//             })\r\n//     }\r\n// }\r\n// export const removeTodolistTC = (todolistId: string) => {\r\n//     return (dispatch: Dispatch) => {\r\n//         //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n//         dispatch(setAppStatusAC({status: 'loading'}))\r\n//         //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n//         dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n//         todolistsAPI.deleteTodolist(todolistId)\r\n//             .then((res) => {\r\n//                 dispatch(removeTodolistAC({id: todolistId}))\r\n//                 //скажем глобально приложению, что асинхронная операция завершена\r\n//                 dispatch(setAppStatusAC({status: 'succeeded'}))\r\n//             })\r\n//     }\r\n// }\r\n// export const addTodolistTC = (title: string) => {\r\n//     return (dispatch: Dispatch) => {\r\n//         dispatch(setAppStatusAC({status: 'loading'}))\r\n//         todolistsAPI.createTodolist(title)\r\n//             .then((res) => {\r\n//                 dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n//                 dispatch(setAppStatusAC({status: 'succeeded'}))\r\n//             })\r\n//     }\r\n// }\r\n// export const changeTodolistTitleTC = (id: string, title: string) => {\r\n//     return (dispatch: Dispatch) => {\r\n//         todolistsAPI.updateTodolist(id, title)\r\n//             .then((res) => {\r\n//                 dispatch(changeTodolistTitleAC({id: id, title}))\r\n//             })\r\n//     }\r\n// }\r\n//\r\n// // types\r\n// export type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\n// export type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\n// export type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\n//\r\n// export type FilterValuesType = 'all' | 'active' | 'completed';\r\n// export type TodolistDomainType = TodolistType & {\r\n//     filter: FilterValuesType\r\n//     entityStatus: RequestStatusType\r\n// }","import {\r\n    addTodolistAC,\r\n    removeTodolistAC,\r\n    setTodolistsAC\r\n} from './todolists-reducer'\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, {dispatch}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTasks(todolistId)\r\n        const tasks = res.data.items\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {tasks, todolistId}\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n})\r\n\r\nexport const removeTaskTC = createAsyncThunk ( 'tasks/removeTask', async (payload:{id: string, todolistId: string}, { dispatch }) =>{\r\n        try {\r\n            await todolistsAPI.deleteTask(payload.todolistId, payload.id)\r\n            dispatch(removeTaskAC({ taskId: payload.id, todolistId: payload.todolistId}))\r\n        } catch (error) {\r\n       handleServerNetworkError(error, dispatch)\r\n        }\r\n\r\n})\r\n\r\nexport const addTaskTC = createAsyncThunk('tasks/addTask', async (payload: { title: string, todolistId: string }, {dispatch}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n       const res = await todolistsAPI.createTask(payload.todolistId, payload.title)\r\n                if (res.data.resultCode === 0) {\r\n                    const task = res.data.data.item\r\n                    dispatch(addTaskAC(task))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n    } catch (error) {\r\n        handleServerAppError(error, dispatch)\r\n    }\r\n\r\n})\r\n\r\nexport const updateTaskTC = createAsyncThunk('tasks/updateTask',\r\n    async (payload: { id: string, model: UpdateDomainTaskModelType, todolistId: string }, {dispatch, getState, rejectWithValue}) => {\r\n        const state = getState() as AppRootStateType\r\n        const task = state.tasks[payload.todolistId].find(t => t.id === payload.id)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            return rejectWithValue('task not found in the state')\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...payload.model\r\n        }\r\n        const res = await todolistsAPI.updateTask(payload.todolistId, payload.id, apiModel)\r\n        try {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(updateTaskAC({taskId: payload.id, model: payload.model, todolistId: payload.todolistId}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n        }\r\n\r\n    })\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<TaskType>) {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = [];\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id];\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action)=>{\r\n            if (action.payload)\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n// actions\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC} = slice.actions\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC({id, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC({title, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const payload = {id, model:{status}, todolistId}\r\n        const thunk = updateTaskTC(payload)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC({id, model:{title: newTitle}, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({ id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC({id, title})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {loginTC} from './auth-reducer'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"} />\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {BrowserRouter, NavLink, Route} from 'react-router-dom'\r\nimport {Login} from '../features/Login/Login'\r\nimport {logoutTC} from '../features/Login/auth-reducer'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!demo) {\r\n            dispatch(initializeAppTC())\r\n        }\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                </Container>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer'\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer'\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../features/Login/auth-reducer'\r\nimport {configureStore} from '@reduxjs/toolkit'\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type RootReducerType = typeof rootReducer\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<RootReducerType>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport App from './app/App'\r\nimport {store} from './app/store'\r\nimport {Provider} from 'react-redux'\r\nimport {BrowserRouter} from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n    </Provider>, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}